# -*- coding: utf-8 -*-
"""TF2.0 Linear Classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dcBxcKY1b7BzYTSBxkOI3Ht7a5UHjTti
"""

#Install Tensor flow
!pip install -q tensorflow==2.0.beta1

import tensorflow as tf
print(tf.__version__)

#Load the data
from sklearn.datasets import load_breast_cancer

df = load_breast_cancer()

#Data type of df
type(df)

#Notes : it is a bunch objects
# This basically act likes dic where you can treat the keys like attributes
df.keys()

# 'Data' means the input data
df.data.shape
# 569 samples & 30 features

#'Target' 
df.target
#1D array of 0 & 1
#Normally when you have K targest, they are labled as 0..K-1

# Their meaning is not lost
df.target_names

# No of targets
df.target.shape

#also get features name
df.feature_names

#import all at top of code
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test= train_test_split(df.data, df.target, test_size=0.33)
N, D=X_train.shape

#Scale the data
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train=scaler.fit_transform(X_train)
X_test= scaler.transform(X_test)

#Build the model

model = tf.keras.models.Sequential([
                                    tf.keras.layers.Input(shape=(D,)),
                                    tf.keras.layers.Dense(1, activation='sigmoid')
                                    ])

#Alternate way
#model = tf.keras.models.Sequential()
#model.add(tf.keras.layers.Dense(1, shape=(D,), activation='Sigmoid'))

model.compile(optimizer='adam', 
              loss='binary_crossentropy',
              metrics=['accuracy'])

#Train the model
r = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=100)

#Evaluate the model - evaluation retuens loss and accuracy
print("Train Score:", model.evaluate(X_train, Y_train))
print("Test Score:", model.evaluate(X_test, Y_test))

# Plot what we returned by model.fit()
#Training loss stored in 'loss' key & validation loss stored in key "val_loss"
import matplotlib.pyplot as plt
plt.plot(r.history['loss'], label='Loss')
plt.plot(r.history['val_loss'], label='Val_Loss')
plt.legend();

# Plot what we returned by model.fit()
#accuracy per itration
plt.plot(r.history['accuracy'], label='Acc')
plt.plot(r.history['val_accuracy'], label='Val_Acc')
plt.legend();


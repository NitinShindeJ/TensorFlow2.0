# -*- coding: utf-8 -*-
"""TF2.0 Linear Classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dcBxcKY1b7BzYTSBxkOI3Ht7a5UHjTti

# **General Work of Data**
"""

#Install Tensor flow
!pip install -q tensorflow==2.0.beta1

import tensorflow as tf
print(tf.__version__)

#Load the data
from sklearn.datasets import load_breast_cancer

df = load_breast_cancer()

#Data type of df
type(df)

#Notes : it is a bunch objects
# This basically act likes dic where you can treat the keys like attributes
df.keys()

# 'Data' means the input data
df.data.shape
# 569 samples & 30 features

#'Target' 
df.target
#1D array of 0 & 1
#Normally when you have K targest, they are labled as 0..K-1

# Their meaning is not lost
df.target_names

# No of targets
df.target.shape

#also get features name
df.feature_names

#import all at top of code
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test= train_test_split(df.data, df.target, test_size=0.33)
N, D=X_train.shape

#Scale the data
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train=scaler.fit_transform(X_train)
X_test= scaler.transform(X_test)

#Build the model

model = tf.keras.models.Sequential([
                                    tf.keras.layers.Input(shape=(D,)),
                                    tf.keras.layers.Dense(1, activation='sigmoid')
                                    ])

#Alternate way
#When we do saving & loading model again, it is because find Input layer. 
#model = tf.keras.models.Sequential()
#model.add(tf.keras.layers.Dense(1, input_shape=(D,), activation='sigmoid'))

model.compile(optimizer='adam', 
              loss='binary_crossentropy',
              metrics=['accuracy'])

#Train the model
r = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=100)

#Evaluate the model - evaluation retuens loss and accuracy
print("Train Score:", model.evaluate(X_train, Y_train))
print("Test Score:", model.evaluate(X_test, Y_test))

# Plot what we returned by model.fit()
#Training loss stored in 'loss' key & validation loss stored in key "val_loss"
import matplotlib.pyplot as plt
plt.plot(r.history['loss'], label='Loss')
plt.plot(r.history['val_loss'], label='Val_Loss')
plt.legend();

# Plot what we returned by model.fit()
#accuracy per itration
plt.plot(r.history['accuracy'], label='Acc')
plt.plot(r.history['val_accuracy'], label='Val_Acc')
plt.legend();

"""# **Making Predictions**"""

#making predicition
P = model.predict(X_test)
print(P) 
# they are outputs of the sigmoid, interpreted as probabilities p(y=1|x)

#Round to get the actual prediction
#Note: has to be flattened since the target are size(N,) while the predictions are size (N,1)
import numpy as np
P=np.round(P).flatten()
print(P)

# Calculate the accuracy, compare it to evaluate() output
print("Manually calculated accuracy:", np.mean(P == Y_test))
print("Evaluate output:", model.evaluate(X_test, Y_test))

"""# **Saving and Loading Model**"""

# let's now save our model to file
model.save('linearclassifier.h5')

!ls -lh

# Let's load the model and confirm that it still works
# Note: there is a bug in Keras where load/save only works if you DON'T use the Input() layer explicitly
# So, make sure you define the model with ONLY Dense(1, input_shape=(D,))
# At least, until the bug is fixed
# https://github.com/keras-team/keras/issues/10417
model = tf.keras.models.load_model('linearclassifier.h5')
print(model.layers)
model.evaluate(X_test, Y_test)

# Download file
from google.colab import files

files.download('linearclassifier.h5')